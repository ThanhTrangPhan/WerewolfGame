/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Control.ClientCtr;
import Model.Group;
import Model.GroupMember;
import Model.ObjectWrapper;
import Model.Player;
import Model.PlayerStat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author demo
 */
public class PlayerMainFrm extends javax.swing.JFrame {

    private static Player player;
    private PlayerStat playerStat;
    private static ClientCtr myctrl;
    private List<Integer> playerOnline;
    private Player chosenPlayer;
    private ArrayList<Group> listGroup;
    private List<GroupMember> listMember;
    private int groupId;
    private GroupMember member;
    private int rank;
    private LinkedHashMap<Player, PlayerStat> scoreboard;
    private HashMap<Player, String> friendRequest;

    /**
     * Creates new form PlayerMainFrm
     */
    public PlayerMainFrm(Player player, ClientCtr ctrl) {
        super("Main page");
        this.player = player;
        myctrl = ctrl;
        init();
        initComponents();
        invite.setVisible(false);
        cancleFriend.setVisible(false);
        groupMatch.setVisible(false);
        btnAcceptFriendRequest.setVisible(false);
        btnRejectFriendRequest.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        friendList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        friendOff = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cancleFriend = new javax.swing.JButton();
        invite = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblGroup = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        groupMatch = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMember = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        globalScore = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblFriendRequest = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        btnAcceptFriendRequest = new javax.swing.JButton();
        btnRejectFriendRequest = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        jLabel3.setText("List friend online: ");

        friendList.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        friendList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        friendList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        friendList.setMinimumSize(new java.awt.Dimension(100, 100));
        friendList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(friendList);

        friendOff.setMinimumSize(new java.awt.Dimension(100, 100));
        friendOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendOffMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(friendOff);

        jLabel4.setText("List friend offline:");

        jLabel8.setText("Statistic");

        jLabel9.setText("Total Match played:");

        jLabel10.setText("Win rate");

        jLabel11.setText("The role played most: ");

        jLabel12.setText(String.valueOf(playerStat.getTotalGameMatch()));

        jLabel13.setText(String.valueOf(playerStat.getWinrate()));

        jLabel14.setText(playerStat.getMostUseRole());

        jLabel15.setText("Player:");

        jLabel16.setText(chosenPlayer.getName());

        cancleFriend.setText("Cancle Friendship");

        invite.setText("Invite to play game");
        invite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteActionPerformed(evt);
            }
        });

        jButton2.setText(player.getName());
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel20.setText("Rank:");

        jLabel21.setText("Loading ... ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(228, 228, 228)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel21)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(invite)
                                .addGap(18, 18, 18)
                                .addComponent(cancleFriend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(223, 223, 223))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8)
                    .addComponent(jButton2))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12))
                        .addGap(20, 20, 20)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel14))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(invite)
                                    .addComponent(cancleFriend)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(96, 96, 96))
        );

        jTabbedPane2.addTab("Info", jPanel1);

        jButton4.setText("Join new group");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Group ");

        jButton3.setText("Leave group");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel18.setText("All the group you have joined");

        tblGroup.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblGroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGroupMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblGroup);

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel19.setText("All member:");

        groupMatch.setText("Play Group Match");
        groupMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupMatchActionPerformed(evt);
            }
        });

        tblMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tblMember);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(groupMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel18)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton3))
                        .addGap(36, 36, 36)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(174, 174, 174)
                        .addComponent(groupMatch))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Group", jPanel3);

        jLabel5.setText("Your rank:");

        globalScore.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        globalScore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                globalScoreMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(globalScore);

        jLabel17.setText("Loading ...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel17)))
                .addContainerGap(568, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Global Scoreboard", jPanel2);

        tblFriendRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblFriendRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFriendRequestMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblFriendRequest);

        jLabel22.setText("");

        btnAcceptFriendRequest.setText("Accept");
        btnAcceptFriendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptFriendRequestActionPerformed(evt);
            }
        });

        btnRejectFriendRequest.setText("Reject");
        btnRejectFriendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectFriendRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel22))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(btnAcceptFriendRequest)
                        .addGap(65, 65, 65)
                        .addComponent(btnRejectFriendRequest)))
                .addContainerGap(414, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(132, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAcceptFriendRequest)
                            .addComponent(btnRejectFriendRequest))
                        .addGap(156, 156, 156))))
        );

        jTabbedPane2.addTab("Friend Request", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1224, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Match request", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // button to show the main player
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        chosenPlayer = player;
        invite.setVisible(false);
        cancleFriend.setVisible(false);
        findRank(chosenPlayer.getId());

        jLabel21.setText(String.valueOf(rank));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.STATISTIC, player.getId()));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void inviteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteActionPerformed
        // TODO add your handling code here

    }//GEN-LAST:event_inviteActionPerformed

    // show the info of the friend that is offline
    private void friendOffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendOffMouseClicked
        // TODO add your handling code here:
        for (Player pl : player.getFriend()) {
            if (pl.getName().equals(friendOff.getSelectedValue())) {
                chosenPlayer = pl;
                break;
            }
        }
        invite.setVisible(false);
        cancleFriend.setVisible(true);
        findRank(chosenPlayer.getId());

        jLabel21.setText(String.valueOf(rank));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.STATISTIC, chosenPlayer.getId()));
    }//GEN-LAST:event_friendOffMouseClicked

    // show the info of the friend player
    private void friendListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendListMouseClicked
        // TODO add your handling code here:
        for (Player pl : player.getFriend()) {
            if (pl.getName().equals(friendList.getSelectedValue())) {
                chosenPlayer = pl;
                break;
            }
        }
        invite.setVisible(true);
        cancleFriend.setVisible(true);
        findRank(chosenPlayer.getId());

        jLabel21.setText(String.valueOf(rank));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.STATISTIC, chosenPlayer.getId()));

    }//GEN-LAST:event_friendListMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    // cancle membership
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.CANCLE_MEMBER, member));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.SEARCH_GROUP_JOINED, player.getId()));

    }//GEN-LAST:event_jButton3ActionPerformed

    private void tblGroupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGroupMouseClicked
        // TODO add your handling code here:
        groupMatch.setVisible(true);
        int column = tblGroup.getColumnModel().getColumnIndexAtX(evt.getX()); // get the coloum of the button
        int row = evt.getY() / tblGroup.getRowHeight(); // get the row of the button
        groupId = listGroup.get(row).getId();
        // *Checking the row or column is valid or not
        if (row < tblGroup.getRowCount() && row >= 0 && column < tblGroup.getColumnCount() && column >= 0) {
            listMember = (List) listGroup.get(row).getMember();
            String[] columnNames = {"Id", "Name", "Online/Offline"};
            String[][] value = new String[listMember.size()][columnNames.length];
            for (int i = 0; i < listMember.size(); i++) {
                value[i][0] = listMember.get(i).getPlayer().getId() + "";
                value[i][1] = listMember.get(i).getPlayer().getName();
//                if(Integer.parseInt(value[i][0]) == player.getId()){
//                    member = listMember.get(i);
//                }
                if (playerOnline.contains(listMember.get(i).getPlayer().getId())) {
                    value[i][2] = "Online";
                } else {
                    value[i][2] = "Offline";
                }
            }
            DefaultTableModel tableModel = new DefaultTableModel(value, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //unable to edit cells
                    return false;
                }
            };
            tblMember.setModel(tableModel);
        }
    }//GEN-LAST:event_tblGroupMouseClicked

    private void groupMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupMatchActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_groupMatchActionPerformed

    private void tblFriendRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFriendRequestMouseClicked
        // TODO add your handling code here:
        int row = tblFriendRequest.getSelectedRow();
        jLabel22.setText("Information about: " + (String) tblFriendRequest.getValueAt(row, 2));
        btnAcceptFriendRequest.setVisible(true);
        btnRejectFriendRequest.setVisible(true);

    }//GEN-LAST:event_tblFriendRequestMouseClicked

    private void btnAcceptFriendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptFriendRequestActionPerformed
        // TODO add your handling code here:
        int row = tblFriendRequest.getSelectedRow();
        Player fr = new Player();
        fr.setId(Integer.parseInt((String) tblFriendRequest.getValueAt(row, 1)));
        ArrayList<Player> arrPlayers = new ArrayList<>();
        arrPlayers.add(player);
        arrPlayers.add(fr);
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.ACCEPT_FRIEND_REQUEST, arrPlayers));
    }//GEN-LAST:event_btnAcceptFriendRequestActionPerformed

    private void btnRejectFriendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectFriendRequestActionPerformed
        // TODO add your handling code here:
        int row = tblFriendRequest.getSelectedRow();
        Player fr = new Player();
        fr.setId(Integer.parseInt((String) tblFriendRequest.getValueAt(row, 1)));
        ArrayList<Player> arrPlayers = new ArrayList<>();
        arrPlayers.add(player);
        arrPlayers.add(fr);
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.REJECT_FRIEND_REQUEST, arrPlayers));
    }//GEN-LAST:event_btnRejectFriendRequestActionPerformed

    private void globalScoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_globalScoreMouseClicked
        // TODO add your handling code here:
        int row = globalScore.getSelectedRow();
        
        chosenPlayer.setId(Integer.parseInt((String) ((DefaultTableModel) globalScore.getModel()).getValueAt(row, 1)));
        chosenPlayer.setName((String) ((DefaultTableModel) globalScore.getModel()).getValueAt(row, 2));
        if (!player.getFriend().contains(chosenPlayer)) {
            String[] options = {"Send Friend request", "Invite to play game", "Cancle"};
            int x = JOptionPane.showOptionDialog(this, "You guys are not friend! Do you want to make friend with this player?",
                    "Choose action: ", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
            if (x == 0) {
                ArrayList<Player> arr = new ArrayList<>();
                arr.add(player); arr.add(chosenPlayer);
                myctrl.sendData(new ObjectWrapper(ObjectWrapper.SEND_FRIEND_REQUEST, arr));                       
            } else if (x==1){
                
            }
        } else{
            String[] options = { "Invite to play game", "Cancle"};
            int x = JOptionPane.showOptionDialog(this, "You guys are friend! Do you want to invite this player to play a game ?",
                    "Choose action: ", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
            if (x == 0) {
                
            }
        }
    }//GEN-LAST:event_globalScoreMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayerMainFrm(player, myctrl).setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptFriendRequest;
    private javax.swing.JButton btnRejectFriendRequest;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton cancleFriend;
    private javax.swing.JList<String> friendList;
    private javax.swing.JList<String> friendOff;
    private javax.swing.JTable globalScore;
    private javax.swing.JButton groupMatch;
    private javax.swing.JButton invite;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable tblFriendRequest;
    private javax.swing.JTable tblGroup;
    private javax.swing.JTable tblMember;
    // End of variables declaration//GEN-END:variables

    // update the friend list
    public void receivedDataProcessingFriendlist(ObjectWrapper data) {
        if (data.getData() instanceof ArrayList<?>) {
            player.setFriend((ArrayList<Player>) data.getData());
        }
    }

    // update the online status
    public void receivedDataProcessingOnline(ObjectWrapper data) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (data.getData() instanceof ArrayList<?>) {
            playerOnline = (ArrayList<Integer>) data.getData();
            int i = 0, j = 0;
            String frlist[] = new String[player.getFriend().size()];
            String froff[] = new String[player.getFriend().size()];
            for (Player fr : player.getFriend()) {
                if (playerOnline.contains(new Integer(fr.getId()))) {
                    frlist[i++] = fr.getName();

                } else {
                    froff[j++] = fr.getName();
                }
            }
            //System.out.println(frlist[0]+frlist[1]);
            friendList.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = frlist.clone();

                @Override
                public int getSize() {
                    return strings.length;
                }

                @Override
                public String getElementAt(int i) {
                    return strings[i];
                }
            });
            friendOff.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = froff.clone();

                @Override
                public int getSize() {
                    return strings.length;
                }

                @Override
                public String getElementAt(int i) {
                    return strings[i];
                }
            });

        }
        if (listMember.size() != 0) {
            String[] columnNames = {"Id", "Name", "Online/Offline"};
            String[][] value = new String[listMember.size()][columnNames.length];
            for (int i = 0; i < listMember.size(); i++) {
                value[i][0] = listMember.get(i).getPlayer().getId() + "";
                value[i][1] = listMember.get(i).getPlayer().getName();
                if (playerOnline.contains(listMember.get(i).getPlayer().getId())) {
                    value[i][2] = "Online";
                } else {
                    value[i][2] = "Offline";
                }

            }
            DefaultTableModel tableModel = new DefaultTableModel(value, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //unable to edit cells
                    return false;
                }
            };
            tblMember.setModel(tableModel);
        }

    }

    // update the Statistic 
    public void receivedDataProcessingStat(ObjectWrapper data) {
        if (data.getData() instanceof PlayerStat) {
            playerStat = (PlayerStat) data.getData();
            jLabel12.setText(String.valueOf(playerStat.getTotalGameMatch()));
            jLabel13.setText(String.valueOf(playerStat.getWinrate()));
            jLabel14.setText(String.valueOf(playerStat.getMostUseRole()));
            jLabel16.setText(String.valueOf(chosenPlayer.getName()));
        }
    }

    // show the group player joined
    public void receivedDataProcessingGroup(ObjectWrapper data) {
        if (data.getData() instanceof ArrayList<?>) {
            listGroup = (ArrayList<Group>) data.getData();

            String[] columnNames = {"Id", "Name", "founder"};
            String[][] value = new String[listGroup.size()][columnNames.length];
            for (int i = 0; i < listGroup.size(); i++) {
                value[i][0] = listGroup.get(i).getId() + "";
                value[i][1] = listGroup.get(i).getName();
                value[i][2] = listGroup.get(i).getFounderName();

            }
            DefaultTableModel tableModel = new DefaultTableModel(value, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //unable to edit cells
                    return false;
                }
            };
            tblGroup.setModel(tableModel);
        } else {
            tblGroup.setModel(null);
        }
    }

    // show the group member
    public void receivedDataProcessingMember(ObjectWrapper data) {
        if (data.getData() instanceof ArrayList<?>) {
            listMember = (ArrayList<GroupMember>) data.getData();

            String[] columnNames = {"Id", "Name", "Online/Offline"};
            String[][] value = new String[listMember.size()][columnNames.length];
            for (int i = 0; i < listMember.size(); i++) {
                value[i][0] = listMember.get(i).getPlayer().getId() + "";
                value[i][1] = listMember.get(i).getPlayer().getName();
                if (playerOnline.contains(listMember.get(i).getPlayer().getId())) {
                    value[i][2] = "Online";
                } else {
                    value[i][2] = "Offline";
                }

            }
            DefaultTableModel tableModel = new DefaultTableModel(value, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //unable to edit cells
                    return false;
                }
            };
            tblMember.setModel(tableModel);
        } else {
            tblMember.setModel(null);
        }
    }

    // update the scoreboard
    public void receivedDataProcessingScoreboard(ObjectWrapper data) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (data.getData() instanceof LinkedHashMap<?, ?>) {
            scoreboard = (LinkedHashMap<Player, PlayerStat>) data.getData();
            //System.out.println(scoreboard.size());
            String[] columnNames = {"Rank", "ID", "Name", "Total Match", "Win rate", "Online/Offline"};
            String[][] value = new String[scoreboard.size()][columnNames.length];
            int i = 0, k = 1;
            for (Map.Entry<Player, PlayerStat> e : scoreboard.entrySet()) {
                Player ep = e.getKey();
                PlayerStat eps = e.getValue();
                value[i][0] = String.valueOf(k);
                value[i][1] = String.valueOf(ep.getId());
                value[i][2] = ep.getName();
                value[i][3] = String.valueOf(eps.getTotalGameMatch());
                value[i][4] = String.valueOf(eps.getWinrate());
                if (playerOnline.contains(ep.getId())) {
                    value[i][5] = "Online";
                } else {
                    value[i][5] = "Offline";
                }
                if (player.getId() == ep.getId()) {
                    rank = k;
                    jLabel17.setText(String.valueOf(rank));
                    jLabel21.setText(String.valueOf(rank));
                }
                ++i;
                ++k;
            }
            DefaultTableModel tableModel = new DefaultTableModel(value, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //unable to edit cells
                    return false;
                }
            };
            globalScore.setModel(tableModel);
        } else {
            globalScore.setModel(null);
        }
    }

    // load all the friend requests are pending
    public void receivedDataProcessingFriendRequestPending(ObjectWrapper data) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (data.getData() instanceof HashMap<?, ?>) {
            friendRequest = (HashMap<Player, String>) data.getData();
            String[] columnNames = {"Rank", "ID", "Name", "Time send", "Online/Offline"};
            String[][] value = new String[friendRequest.size()][columnNames.length];
            int i = 0;
            for (Map.Entry<Player, String> e : friendRequest.entrySet()) {
                Player ep = e.getKey();
                findRank(ep.getId());
                value[i][0] = String.valueOf(rank);
                value[i][1] = String.valueOf(ep.getId());
                value[i][2] = ep.getName();
                value[i][3] = e.getValue();

                if (playerOnline.contains(ep.getId())) {
                    value[i][4] = "Online";
                } else {
                    value[i][4] = "Offline";
                }

                ++i;
            }
            DefaultTableModel tableModel = new DefaultTableModel(value, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //unable to edit cells
                    return false;
                }
            };
            tblFriendRequest.setModel(tableModel);
        } else {
            tblFriendRequest.setModel(null);

        }
    }

    public void receivedDataProcessingAnsFriendRequest(ObjectWrapper data) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (data.getData() instanceof String) {
            String res = (String) data.getData();
            if (res.equals("false")) {
                JOptionPane.showMessageDialog(this, "Something wrong happened! Please try again");

            } else {
                JOptionPane.showMessageDialog(this, "You have successfully " + res + " this friend request!");
                ((DefaultTableModel) tblFriendRequest.getModel()).removeRow(tblFriendRequest.getSelectedRow());
            }
            btnAcceptFriendRequest.setVisible(false);
            btnRejectFriendRequest.setVisible(false);
        }
    }

    public void receivedDataProcessingSendFriendRequest(ObjectWrapper data) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (data.getData() instanceof String) {
            String res = (String) data.getData();
            if (res.equals("false")) {
                JOptionPane.showMessageDialog(this, "Something wrong happened! Please try again");

            } else {
                JOptionPane.showMessageDialog(this, "You have successfully send friend request !");
            }

        }
    }

    private void findRank(int playerID) {
        int i = 1;
        for (Map.Entry<Player, PlayerStat> e : scoreboard.entrySet()) {
            if (playerID == e.getKey().getId()) {
                rank = i;
                break;
            }
            ++i;
        }
    }

    // update the friendlist every 5sec
    private void refresh() {
        Runnable refreshFriendList = () -> {
            myctrl.sendData(new ObjectWrapper(ObjectWrapper.PLAYER_ONLINE, null));
            myctrl.sendData(new ObjectWrapper(ObjectWrapper.FRIEND_LIST, player.getId()));
            myctrl.sendData(new ObjectWrapper(ObjectWrapper.LOAD_FRIEND_REQUEST, player));
        };

        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
        executor.scheduleAtFixedRate(refreshFriendList, 10, 5, TimeUnit.SECONDS);
    }

    private void init() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        playerOnline = new ArrayList<>();
        chosenPlayer = new Player();
        chosenPlayer.setName(player.getName());
        chosenPlayer.setId(player.getId());
        playerStat = new PlayerStat();
        friendRequest = new HashMap<>();
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_FRIEND_LIST, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.PLAYER_ONLINE, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_STATISTIC, this));
        listGroup = new ArrayList<>();
        listMember = new ArrayList<>();
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_GROUP_JOINED, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_SEARCH_GROUP, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_SEARCH_MEMBER, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.GLOBAL_SCOREBOARD, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_LOAD_FRIEND_REQUEST, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_ANS_FRIEND_REQUEST, this));
        myctrl.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_SEND_FRIEND_REQUEST, this));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.STATISTIC, chosenPlayer.getId()));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.FRIEND_LIST, player.getId()));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.GLOBAL_SCOREBOARD, null));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.SEARCH_GROUP_JOINED, player.getId()));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.PLAYER_ONLINE, null));
        myctrl.sendData(new ObjectWrapper(ObjectWrapper.LOAD_FRIEND_REQUEST, player));
        refresh();
    }

}
